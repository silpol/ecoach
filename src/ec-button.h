/* Generated by GOB (v2.0.16)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>


#include "config.h"

#include <glib/gi18n.h>
#include <gtk/gtkdrawingarea.h>
#include <gtk/gtkbutton.h>
#include <gtk/gtkmain.h>

#ifndef __EC_BUTTON_H__
#define __EC_BUTTON_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


typedef enum {
	EC_BUTTON_STATE_RELEASED = 0,
	EC_BUTTON_STATE_DOWN,
	EC_BUTTON_STATE_COUNT
} EcButtonState;
#define EC_TYPE_BUTTON_STATE ec_button_state_get_type()
GType ec_button_state_get_type (void) G_GNUC_CONST;


/*
 * Type checking and casting macros
 */
#define EC_TYPE_BUTTON	(ec_button_get_type())
#define EC_BUTTON(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), ec_button_get_type(), EcButton)
#define EC_BUTTON_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), ec_button_get_type(), EcButton const)
#define EC_BUTTON_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), ec_button_get_type(), EcButtonClass)
#define EC_IS_BUTTON(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), ec_button_get_type ())

#define EC_BUTTON_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), ec_button_get_type(), EcButtonClass)

/* Private structure type */
typedef struct _EcButtonPrivate EcButtonPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_EC_BUTTON__
#define __TYPEDEF_EC_BUTTON__
typedef struct _EcButton EcButton;
#endif
struct _EcButton {
	GtkDrawingArea __parent__;
	/*< private >*/
	EcButtonPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _EcButtonClass EcButtonClass;
struct _EcButtonClass {
	GtkDrawingAreaClass __parent__;
	/*signal*/void (* clicked) (EcButton * self);
};


/*
 * Public methods
 */
GType	ec_button_get_type	(void) G_GNUC_CONST;
#line 28 "ec-button.gob"
gint 	ec_button_get_btn_down_offset	(EcButton * self);
#line 75 "ec-button.h"
#line 28 "ec-button.gob"
void 	ec_button_set_btn_down_offset	(EcButton * self,
					gint val);
#line 79 "ec-button.h"
#line 45 "ec-button.gob"
gboolean 	ec_button_get_center_vertically	(EcButton * self);
#line 82 "ec-button.h"
#line 40 "ec-button.gob"
void 	ec_button_set_center_vertically	(EcButton * self,
					gboolean val);
#line 86 "ec-button.h"
#line 61 "ec-button.gob"
gboolean 	ec_button_get_center_text_vertically	(EcButton * self);
#line 89 "ec-button.h"
#line 56 "ec-button.gob"
void 	ec_button_set_center_text_vertically	(EcButton * self,
					gboolean val);
#line 93 "ec-button.h"
#line 143 "ec-button.gob"
GtkWidget * 	ec_button_new	(void);
#line 96 "ec-button.h"
#line 152 "ec-button.gob"
void 	ec_button_set_label_text	(EcButton * self,
					const gchar * text);
#line 100 "ec-button.h"
#line 159 "ec-button.gob"
const gchar * 	ec_button_get_label_text	(EcButton * self);
#line 103 "ec-button.h"
#line 167 "ec-button.gob"
void 	ec_button_set_title_text	(EcButton * self,
					const gchar * text);
#line 107 "ec-button.h"
#line 174 "ec-button.gob"
const gchar * 	ec_button_get_title_text	(EcButton * self);
#line 110 "ec-button.h"
#line 188 "ec-button.gob"
void 	ec_button_set_bg_image	(EcButton * self,
					EcButtonState state,
					const gchar * path);
#line 115 "ec-button.h"
#line 234 "ec-button.gob"
void 	ec_button_set_bg_image_pixbuf	(EcButton * self,
					EcButtonState state,
					GdkPixbuf * pixbuf);
#line 120 "ec-button.h"
#line 265 "ec-button.gob"
void 	ec_button_set_icon	(EcButton * self,
					const gchar * path);
#line 124 "ec-button.h"
#line 294 "ec-button.gob"
void 	ec_button_set_icon_pixbuf	(EcButton * self,
					GdkPixbuf * pixbuf);
#line 128 "ec-button.h"
#line 310 "ec-button.gob"
void 	ec_button_set_font_description_label	(EcButton * self,
					const PangoFontDescription * desc);
#line 132 "ec-button.h"
#line 320 "ec-button.gob"
const PangoFontDescription * 	ec_button_get_font_description_label	(EcButton * self);
#line 135 "ec-button.h"
#line 326 "ec-button.gob"
void 	ec_button_set_font_description_title	(EcButton * self,
					const PangoFontDescription * desc);
#line 139 "ec-button.h"
#line 336 "ec-button.gob"
const PangoFontDescription * 	ec_button_get_font_description_title	(EcButton * self);
#line 142 "ec-button.h"
#line 342 "ec-button.gob"
void 	ec_button_set_alignment	(EcButton * self,
					PangoAlignment alignment);
#line 146 "ec-button.h"
#line 353 "ec-button.gob"
PangoAlignment 	ec_button_get_alignment	(EcButton * self);
#line 149 "ec-button.h"
#line 359 "ec-button.gob"
void 	ec_button_clicked	(EcButton * self);
#line 152 "ec-button.h"

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define ec_button_connect__clicked(object,func,data)	g_signal_connect(EC_BUTTON(__extension__ ({EcButton *___object = (object); ___object; })),"clicked",(GCallback) __extension__ ({void (* ___clicked) (EcButton * ___fake___self, gpointer ___data ) = (func); ___clicked; }), (data))
#define ec_button_connect_after__clicked(object,func,data)	g_signal_connect_after(EC_BUTTON(__extension__ ({EcButton *___object = (object); ___object; })),"clicked",(GCallback) __extension__ ({void (* ___clicked) (EcButton * ___fake___self, gpointer ___data ) = (func); ___clicked; }), (data))
#define ec_button_connect_data__clicked(object,func,data,destroy_data,flags)	g_signal_connect_data(EC_BUTTON(__extension__ ({EcButton *___object = (object); ___object; })),"clicked",(GCallback) __extension__ ({void (* ___clicked) (EcButton * ___fake___self, gpointer ___data ) = (func); ___clicked; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define ec_button_connect__clicked(object,func,data)	g_signal_connect(EC_BUTTON(object),"clicked",(GCallback)(func),(data))
#define ec_button_connect_after__clicked(object,func,data)	g_signal_connect_after(EC_BUTTON(object),"clicked",(GCallback)(func),(data))
#define ec_button_connect_data__clicked(object,func,data,destroy_data,flags)	g_signal_connect_data(EC_BUTTON(object),"clicked",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


/*
 * Argument wrapping macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define EC_BUTTON_PROP_BTN_DOWN_OFFSET(arg)    	"btn_down_offset", __extension__ ({gint z = (arg); z;})
#define EC_BUTTON_GET_PROP_BTN_DOWN_OFFSET(arg)	"btn_down_offset", __extension__ ({gint *z = (arg); z;})
#define EC_BUTTON_PROP_CENTER_VERTICALLY(arg)    	"center_vertically", __extension__ ({gboolean z = (arg); z;})
#define EC_BUTTON_GET_PROP_CENTER_VERTICALLY(arg)	"center_vertically", __extension__ ({gboolean *z = (arg); z;})
#define EC_BUTTON_PROP_CENTER_TEXT_VERTICALLY(arg)    	"center_text_vertically", __extension__ ({gboolean z = (arg); z;})
#define EC_BUTTON_GET_PROP_CENTER_TEXT_VERTICALLY(arg)	"center_text_vertically", __extension__ ({gboolean *z = (arg); z;})
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define EC_BUTTON_PROP_BTN_DOWN_OFFSET(arg)    	"btn_down_offset",(gint )(arg)
#define EC_BUTTON_GET_PROP_BTN_DOWN_OFFSET(arg)	"btn_down_offset",(gint *)(arg)
#define EC_BUTTON_PROP_CENTER_VERTICALLY(arg)    	"center_vertically",(gboolean )(arg)
#define EC_BUTTON_GET_PROP_CENTER_VERTICALLY(arg)	"center_vertically",(gboolean *)(arg)
#define EC_BUTTON_PROP_CENTER_TEXT_VERTICALLY(arg)    	"center_text_vertically",(gboolean )(arg)
#define EC_BUTTON_GET_PROP_CENTER_TEXT_VERTICALLY(arg)	"center_text_vertically",(gboolean *)(arg)
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
